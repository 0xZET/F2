# 2017.11.24

Testing commands:
  - `sudo cp softu2f-systemd-daemon/softu2f.socket /etc/systemd/system/ && sudo cp softu2f-systemd-daemon/softu2f.service /etc/systemd/system/ && sudo systemctl daemon-reload`
  - `cargo build --all && sudo cp target/debug/softu2f-systemd-daemon /usr/libexec/ && sudo systemctl start softu2f.socket && ncat -U /run/softu2f/softu2f.sock ; sudo systemctl status softu2f.service --lines=100`

Should switch to SOCK_SEQSTREAM
  - may require some extra work writing the transport layer, but may be grounds for submitting improvements to tokio
  - marginally nicer to have socket layer deal with explicit framing

# 2017.11.23
Trying to get `sd_is_socket_unix` to work with a path to be sure the right file descriptor is being passed in.
Technically for a single descriptor I don't need to check, but I'm curious how to get it working.
Relevant SO post, doesn't contain a true answer though: https://stackoverflow.com/questions/31517018/get-absolute-path-from-a-fd-of-an-af-unix-socket-in-kernel-module
Using getsockname, discovered there are two extra bytes on the front and I don't know why (0x01, 0x00)
  - Derp, because that parameter is a struct, not a char*

Found bug in rust-systemd, using into_cstr in inner scope drops ownership of path before pointer to it is used.

bind/listen steps are performed by systemd activation, still need to accept individual connections http://man7.org/linux/man-pages/man2/accept.2.html

Considering how to actually send/recieve data over this socket we now have
  - https://stackoverflow.com/questions/4669710/atomic-write-on-an-unix-socket
  - https://cr.yp.to/docs/secureipc.html

How to get peer uid? The fd is a socket to systemd, need to use maybe sd_peer_get_owner_uid which calls getpeercred which calls `getsockopt(fd, SOL_SOCKET, SO_PEERCRED, &u, &n)` which I would expect not to work.
  - Nope I'm dumb, upon accepting on a SOCK_STREAM, the connection will have a new fd that normal peer uid functions work on.
# 2017.11.22
- rust-systemd bug: In `is_socket_unix`, for normal file system AF_UNIX sockets, the length parameter should be zero, but it is set to the length of the path. http://codyps.com/docs/systemd/x86_64-unknown-linux-gnu/stable/src/systemd/daemon.rs.html#158 http://manpages.ubuntu.com/manpages/xenial/man3/sd_is_socket_unix.3.html
    - upon reading source code, technically it is fine to set length to strlen of the path, though zero works as well, so no fix is needed

# 2017.11.21
- systemd runs services in unconfined_service_t domain, which can do most things, but not create sockets under /run
  - instead create a service policy file: https://danwalsh.livejournal.com/61107.html
- socket gets created, but is not accessible to regular users
  - solution is to use tmpfiles.d to create a folder with the right permissions and then nest inside that: https://serverfault.com/questions/708597/where-to-create-an-af-local-af-unix-socket-file-when-not-allowed-to-write-in-va
